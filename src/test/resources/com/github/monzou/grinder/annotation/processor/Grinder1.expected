package com.github.monzou.grinder.annotation.processor;

//CHECKSTYLE:OFF
import java.util.List;
import java.util.Map;

import com.github.monzou.grinder.BeanProperty;
import com.github.monzou.grinder.BeanPropertyAccessor;
import com.github.monzou.grinder.annotation.processor.TradeBean;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableMap.Builder;

/**
 * TradeBeanMeta
 */
public class TradeBeanMeta {

    /** tradeNo */
    public static final BeanProperty<TradeBean, java.lang.String> tradeNo = new BeanProperty<TradeBean, java.lang.String>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "tradeNo";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.String apply(TradeBean bean) {
            return bean.getTradeNo();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, java.lang.String tradeNo) {
            bean.setTradeNo(tradeNo);
            return bean;
        }

    };

    /** status */
    public static final BeanProperty<TradeBean, com.github.monzou.grinder.annotation.processor.TradeBean.Status> status = new BeanProperty<TradeBean, com.github.monzou.grinder.annotation.processor.TradeBean.Status>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "status";
        }

        /** {@inheritDoc} */
        @Override
        public com.github.monzou.grinder.annotation.processor.TradeBean.Status apply(TradeBean bean) {
            return bean.getStatus();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, com.github.monzou.grinder.annotation.processor.TradeBean.Status status) {
            bean.setStatus(status);
            return bean;
        }

    };

    /** version */
    public static final BeanProperty<TradeBean, java.lang.Long> version = new BeanProperty<TradeBean, java.lang.Long>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "version";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.Long apply(TradeBean bean) {
            return bean.getVersion();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, java.lang.Long version) {
            bean.setVersion(version);
            return bean;
        }

    };

    /** deleted */
    public static final BeanProperty<TradeBean, java.lang.Boolean> deleted = new BeanProperty<TradeBean, java.lang.Boolean>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "deleted";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.Boolean apply(TradeBean bean) {
            return bean.isDeleted();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, java.lang.Boolean deleted) {
            bean.setDeleted(deleted);
            return bean;
        }

    };

    /** flag */
    public static final BeanProperty<TradeBean, java.lang.Boolean> flag = new BeanProperty<TradeBean, java.lang.Boolean>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "flag";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.Boolean apply(TradeBean bean) {
            return bean.getFlag();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, java.lang.Boolean flag) {
            bean.setFlag(flag);
            return bean;
        }

    };

    /** readonly */
    public static final BeanPropertyAccessor<TradeBean, java.lang.String> readonly = new BeanPropertyAccessor<TradeBean, java.lang.String>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "readonly";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.String apply(TradeBean bean) {
            return bean.getReadonly();
        }

    };

    /** tradeNoAndStatus */
    public static final BeanPropertyAccessor<TradeBean, java.lang.String> tradeNoAndStatus = new BeanPropertyAccessor<TradeBean, java.lang.String>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "tradeNoAndStatus";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.String apply(TradeBean bean) {
            return bean.getTradeNoAndStatus();
        }

    };

    /** foo */
    public static final BeanProperty<TradeBean, java.lang.String> foo = new BeanProperty<TradeBean, java.lang.String>() {

        /** {@inheritDoc} */
        @Override
        public java.lang.String getName() {
            return "foo";
        }

        /** {@inheritDoc} */
        @Override
        public java.lang.String apply(TradeBean bean) {
            return bean.getFoo();
        }

        /** {@inheritDoc} */
        @Override
        public TradeBean apply(TradeBean bean, java.lang.String foo) {
            bean.setFoo(foo);
            return bean;
        }

    };

    private static final Map<String, BeanProperty<? super TradeBean, ?>> properties;

    private static final Map<String, BeanPropertyAccessor<? super TradeBean, ?>> propertyAccessors;

    static {

        Builder<String, BeanProperty<? super TradeBean, ?>> propertiesBuilder = ImmutableMap.builder();
        propertiesBuilder.put("tradeNo", tradeNo);
        propertiesBuilder.put("status", status);
        propertiesBuilder.put("version", version);
        propertiesBuilder.put("deleted", deleted);
        propertiesBuilder.put("flag", flag);
        propertiesBuilder.put("foo", foo);
        properties = propertiesBuilder.build();

        Builder<String, BeanPropertyAccessor<? super TradeBean, ?>> propertyAccessorsBuilder = ImmutableMap.builder();
        propertyAccessorsBuilder.put("readonly", readonly);
        propertyAccessorsBuilder.put("tradeNoAndStatus", tradeNoAndStatus);
        propertyAccessors = propertyAccessorsBuilder.build();

    }

    /**
     * Get all properties
     * 
     * @return properties
     */
    public static List<BeanProperty<? super TradeBean, ?>> getProperties() {
        return ImmutableList.copyOf(properties.values());
    }

    /**
     * Get all property accessors
     * 
     * @return property accessors
     */
    public static List<BeanPropertyAccessor<? super TradeBean, ?>> getPropertyAccessors() {
        ImmutableList.Builder<BeanPropertyAccessor<? super TradeBean, ?>> builder = ImmutableList.builder();
        builder.addAll(properties.values());
        builder.addAll(propertyAccessors.values());
        return builder.build();
    }

    /**
     * Get the bean property by name
     * 
     * @param propertyName property name
     * @return {@link BeanProperty}
     */
    public static BeanProperty<? super TradeBean, ?> getProperty(String propertyName) {
        return properties.get(propertyName);
    }

    /**
     * Get the bean property accessor by name
     * 
     * @param propertyName property name
     * @return {@link BeanPropertyAccessor}
     */
    public static BeanPropertyAccessor<? super TradeBean, ?> getPropertyAccessor(String propertyName) {
        BeanPropertyAccessor<? super TradeBean,?> property = getProperty(propertyName);
        if (property == null) {
            property = propertyAccessors.get(propertyName);
        }
        return property;
    }

}
